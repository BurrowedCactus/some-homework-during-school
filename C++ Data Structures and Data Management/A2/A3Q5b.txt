// l is the length of the output, s is either "In" or "De"
void merge(int l, string s){
	// the number of elements in the stack >= in the input stream
	for (int i = l; i > l/2; --i){
		I -> S;
	}
	count_s = l - l/2;
	for (int i = 0; i < l; ++i){
		if ((s == "In" && I.front <= S.top) || (s == "De" && I.front >= S.top) ||
		(count_s == 0)){
			I -> O;
		} else {
			S -> O;
		}
	}
	
}

void flip(string& mode){
	mode = (mode == "In")? "De" : "In";
}

void sortQueue(){
	int l = 2;
	for (int trial = 0; trial < log(n); ++trial){
		string mode = (log(n) % 2 == 1)? "In" : "De";
		for(int i = 0; i < n/l; ++i){
			Merge(l,mode);
			if (i % 4 != 1){
				flip(mode);
			}
		}
		l *= 2;
	}
}